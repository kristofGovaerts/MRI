#!/usr/bin/env python
# -*- coding: CP1252 -*-
#
# generated by wxGlade 0.6.8 (standalone edition) on Fri Aug 30 10:58:03 2013
#

import wx
import os
import nibabel as nib
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
import pylab as pl
import numpy as np
from CESTimports import *
from ProcessImages.ReadText import *

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, wx.ID_ANY, style=0)
        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.window_3 = wx.SplitterWindow(self.notebook_1_pane_1, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER)
        self.window_3_pane_1 = wx.Panel(self.window_3, wx.ID_ANY)
        self.window_3_pane_2 = wx.Panel(self.window_3, wx.ID_ANY)
        self.PlusOffsLabel = wx.StaticText(self.window_3_pane_2, wx.ID_ANY, _("Positive Offset"))
        self.BrowsePlus = wx.Button(self.window_3_pane_2, wx.ID_FILE1, _("Browse"))
        self.PlusText = wx.TextCtrl(self.window_3_pane_2, wx.ID_ANY, "")
        self.window_5 = wx.SplitterWindow(self.notebook_1_pane_1, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER)
        self.window_5_pane_1 = wx.Panel(self.window_5, wx.ID_ANY)
#        self.NegVisu = CustomWidget(self.window_5_pane_1, wx.ID_ANY)
        self.window_5_pane_2 = wx.Panel(self.window_5, wx.ID_ANY)
        self.NegOffsLabel = wx.StaticText(self.window_5_pane_2, wx.ID_ANY, _("Negative Offset"))
        self.BrowseNeg = wx.Button(self.window_5_pane_2, wx.ID_FILE2, _("Browse"))
        self.NegText = wx.TextCtrl(self.window_5_pane_2, wx.ID_ANY, "")
        self.window_1 = wx.SplitterWindow(self.notebook_1_pane_1, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER)
        self.window_1_pane_1 = wx.Panel(self.window_1, wx.ID_ANY)
#        self.B0Visu = CustomWidget(self.window_1_pane_1, wx.ID_ANY)
        self.window_1_pane_2 = wx.Panel(self.window_1, wx.ID_ANY)
        b0maplabel="B0 map.   Slice %r" % 1
        self.B0MapLabel = wx.StaticText(self.window_1_pane_2, wx.ID_ANY, _(b0maplabel))
        self.B0zdim=1
        self.B0tdim=1
        self.B0MapSlider = wx.Slider(self.window_1_pane_2, wx.ID_ANY, 0, 0, self.B0zdim * self.B0tdim, style=wx.SL_HORIZONTAL)

        self.BrowseB0 = wx.Button(self.window_1_pane_2, wx.ID_FILE3, _("Browse"))
        self.B0Text = wx.TextCtrl(self.window_1_pane_2, wx.ID_ANY, "")
        self.window_6 = wx.SplitterWindow(self.notebook_1_pane_1, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER)
        self.window_6_pane_1 = wx.Panel(self.window_6, wx.ID_ANY)
#        self.ResultVisu = CustomWidget(self.window_6_pane_1, wx.ID_ANY)
        self.window_6_pane_2 = wx.Panel(self.window_6, wx.ID_ANY)
        self.ResImageLabel = wx.StaticText(self.window_6_pane_2, wx.ID_ANY, _("Computed Image"))
        self.ComputeOutput = wx.Button(self.window_6_pane_2, wx.ID_ANY, _("Calculate"))
        self.SaveOutput = wx.Button(self.window_6_pane_2, wx.ID_ANY, _("Save"))
        self.notebook_1_pane_2 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1_pane_3 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1_pane_4 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.notebook_1_pane_5 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.PlusCanvas = FigureCanvas(self.window_3_pane_1,-1,pl.figure())
        self.NegCanvas = FigureCanvas(self.window_5_pane_1,-1,pl.figure())
        self.B0Canvas = FigureCanvas(self.window_1_pane_1,-1,pl.figure())
        self.OutputCanvas = FigureCanvas(self.window_6_pane_1,-1,pl.figure())

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        #button click events
        self.Bind(wx.EVT_BUTTON, self.OnBrowsePlus, self.BrowsePlus)
        self.Bind(wx.EVT_BUTTON, self.OnBrowseNeg, self.BrowseNeg)
        self.Bind(wx.EVT_BUTTON, self.OnBrowseB0, self.BrowseB0)
        self.Bind(wx.EVT_BUTTON, self.OnComputeOutput, self.ComputeOutput)

        #text field event handlers
        self.Bind(wx.EVT_TEXT, self.OnPlusText, self.PlusText)
        self.Bind(wx.EVT_TEXT, self.OnNegText, self.NegText)
        self.Bind(wx.EVT_TEXT, self.OnB0Text, self.B0Text)
        self.Bind(wx.EVT_SLIDER, self.OnB0Slider, self.B0MapSlider)

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle(_("CEST processing tool"))
        self.PlusText.SetMinSize((300, -1))
        self.NegText.SetMinSize((300, -1))
        self.window_3_pane_1.SetMinSize((440, 380))
        self.window_3_pane_2.SetMinSize((440, 40))
        self.window_5_pane_1.SetMinSize((456, 380))
        self.window_5_pane_2.SetMinSize((440, 40))
        self.window_1_pane_1.SetMinSize((440, 380))
        self.window_1_pane_2.SetMinSize((440, 60))
        self.B0MapSlider.SetMinSize((300, -1))
        self.window_6_pane_2.SetMinSize((440, 380))
        self.window_6_pane_2.SetMinSize((440, 60))

        self.window_6_pane_1.SetMinSize((440, 380))
        self.window_6_pane_2.SetMinSize((440, 40))
        self.B0Text.SetMinSize((300, -1))
        self.notebook_1_pane_5.SetFont(wx.Font(9, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "MS Shell Dlg 2"))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.GridSizer(2, 2, 0, 0)
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        sizer_10_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        sizer_10_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        self.B0mapSizer1=wx.BoxSizer(wx.HORIZONTAL)

        self.window_3_pane_1.SetSizer(sizer_7)
        sizer_8.Add(self.PlusOffsLabel, 0, 0, 0)
        sizer_10.Add(self.BrowsePlus, 0, 0, 0)
        sizer_10.Add(self.PlusText, 0, 0, 0)
        sizer_8.Add(sizer_10, 1, wx.EXPAND, 0)
        self.window_3_pane_2.SetSizer(sizer_8)
        self.window_3.SplitHorizontally(self.window_3_pane_1, self.window_3_pane_2)
        grid_sizer_1.Add(self.window_3, 1, wx.EXPAND, 0)

        self.window_5_pane_1.SetSizer(sizer_11)
        sizer_12.Add(self.NegOffsLabel, 0, 0, 0)
        sizer_10_copy.Add(self.BrowseNeg, 0, 0, 0)
        sizer_10_copy.Add(self.NegText, 0, 0, 0)
        sizer_12.Add(sizer_10_copy, 1, wx.EXPAND, 0)
        self.window_5_pane_2.SetSizer(sizer_12)
        self.window_5.SplitHorizontally(self.window_5_pane_1, self.window_5_pane_2)
        grid_sizer_1.Add(self.window_5, 1, wx.EXPAND, 0)

        self.window_1_pane_1.SetSizer(sizer_3)
        sizer_2.Add(self.B0MapLabel, 0, wx.EXPAND, 0)
        sizer_2.Add(self.B0MapSlider, 0, wx.EXPAND, 0)
        sizer_4.Add(sizer_2, 1, wx.EXPAND, 0)

        sizer_6.Add(self.BrowseB0, 0, 0, 0)
        sizer_6.Add(self.B0Text, 0, 0, 0)
        sizer_4.Add(sizer_6, 1, wx.EXPAND, 0)
        self.window_1_pane_2.SetSizer(sizer_4)
        self.window_1.SplitHorizontally(self.window_1_pane_1, self.window_1_pane_2)
        grid_sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)

        self.window_6_pane_1.SetSizer(sizer_13)
        sizer_14.Add(self.ResImageLabel, 0, 0, 0)
        sizer_10_copy_1.Add(self.ComputeOutput, 0, 0, 0)
        sizer_10_copy_1.Add(self.SaveOutput, 0, 0, 0)
        sizer_14.Add(sizer_10_copy_1, 1, wx.EXPAND, 0)
        self.window_6_pane_2.SetSizer(sizer_14)
        self.window_6.SplitHorizontally(self.window_6_pane_1, self.window_6_pane_2)
        grid_sizer_1.Add(self.window_6, 1, wx.EXPAND, 0)

        self.notebook_1_pane_1.SetSizer(grid_sizer_1)
        self.notebook_1_pane_4.SetSizer(sizer_15)
        self.notebook_1.AddPage(self.notebook_1_pane_1, _("CEST images"))
        self.notebook_1.AddPage(self.notebook_1_pane_2, _("Outputs"))
        self.notebook_1.AddPage(self.notebook_1_pane_3, _("Options"))
        self.notebook_1.AddPage(self.notebook_1_pane_4, _("Help"))
        self.notebook_1.AddPage(self.notebook_1_pane_5, _("About"))
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    #key bindings
    def OnBrowsePlus(self,e):
        l1=loadFile(self, "Select file with positive offset.")
        self.PlusText.SetValue(l1)

    def OnPlusText(self,e):
        l1=self.PlusText.GetValue()
        try:
            self.im1array=correctslope(nib.load(l1).get_data(), l1)
            im1arraysl=self.im1array[:,:,0,0]
            print "Positive offset image corrected for slope."
            figure, cb=plotGraph(im1arraysl)
            self.PlusCanvas = FigureCanvas(self.window_3_pane_1, -1, figure)
        except nib.spatialimages.ImageFileError:
            pass

    def OnBrowseNeg(self,e):
        l2=loadFile(self, "Select file with negative offset.")
        self.NegText.SetValue(l2)

    def OnNegText(self,e):
        l2=self.NegText.GetValue()
        try:
            self.im2array=correctslope(nib.load(l2).get_data(), l2)
            im2arraysl=self.im2array[:,:,0,0]
            print "Negative offset image corrected for slope."
            figure, cb=plotGraph(im2arraysl)
            self.NegCanvas=FigureCanvas(self.window_5_pane_1 ,-1,figure)
        except nib.spatialimages.ImageFileError:
            pass

    def OnBrowseB0(self,e):
        l3=loadFile(self, "Select B0 map.")
        self.B0Text.SetValue(l3)

    def OnB0Text(self,e):
        l3=self.B0Text.GetValue()
        try:
            self.im3array=correctslope(nib.load(l3).get_data(),l3)
            print "B0 map corrected for slope."
            self.B0slice=self.im3array[:,:,0,0]
            figure, cb=plotGraph(self.B0slice)
            self.B0Canvas=FigureCanvas(self.window_1_pane_1,-1,figure)
            self.B0zdim=self.im3array.shape[3]
            self.B0tdim=self.im3array.shape[2]
            self.B0MapSlider.SetRange(0,self.B0tdim*self.B0zdim)
        except nib.spatialimages.ImageFileError:
            pass

    def OnB0Slider(self,e):
        self.B0sliderval=self.B0MapSlider.GetValue()
        self.B0z, self.B0t=np.unravel_index(self.B0sliderval, [self.B0zdim, self.B0tdim])
        self.B0slice=self.im3array[:,:,self.B0t,self.B0z]
        b0maplabel="B0 map.   Slice %r" %(self.B0sliderval+1)
        self.B0MapLabel.SetLabelText(b0maplabel)
        figure, cb=plotGraph(self.B0slice)
        self.B0Canvas=FigureCanvas(self.window_1_pane_1,-1,figure)

    def OnComputeOutput(self,e):
        plusl=self.im1array[:,:,0,0]
        negsl=self.im2array[:,:,0,0]
        self.subtr=ComputePercentDiff(plusl,negsl)
        #self.B0corrsubtr=CorrectB0(self.subtr, self.B0slice)
        outclim=[0,5]
        figure, cb=plotGraph(self.subtr)
        pl.clim(outclim)
        cb.outline.set_linewidth(0.2)
        cb.ax.tick_params(size=1,labelsize=2, pad=0)
        self.OutputCanvas=FigureCanvas(self.window_6_pane_1,-1,figure)


# end of class MainFrame
class CestApp(wx.App):
    def OnInit(self):
        #wx.InitAllImageHandlers()
        MFrame = MainFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(MFrame)
        MFrame.Show()
        return 1

# end of class CestApp

if __name__ == "__main__":
    gettext.install("cestapp") # replace with the appropriate catalog name

    cestapp = CestApp(0)
    cestapp.MainLoop()